<atom:page xmlns:atom="http://atom.com"
           xmlns:test="urn:jsptagdir:/WEB-INF/tags/test"
           xmlns:utils="urn:jsptagdir:/WEB-INF/tags/utils">
    <html xmlns="http://www.w3.org/1999/xhtml" lang="ru">
    <head>
        <title>Project1</title>
        <!--<intercept-url pattern="/favicon.ico" access="ROLE_ANONYMOUS" />-->
        <!--<link rel="shortcut icon" href="/PATH_TO_STATIC_FAVICON/favicon.ico" type="image/x-icon">-->
        <atom:css src="project1/css/project1.css"/>
        <!--<link rel="stylesheet" type="text/css" href="css/project1.css"/>-->
        <!--<script type="text/javascript" src="js/project1.js"></script>-->
    </head>
    <body>
    <div class="body">


        <h1>${data.atom}</h1>
        <p>${data['atom-description']}</p>
        <utils:ul items="${data['atom-features']}" var="item" varStatus="i">
            ${item.text}
        </utils:ul>


        <h2>Language - ${not empty param.lang ? param.lang : "default"}</h2>

        <p class="description">
            <b>atom:tag</b> - is the basic tag based on which you can create any custom tag you want (see html example)
        </p>
        <ol>
            <li>
                <atom:tag dropEmptyTag="true"> without any tag (dropEmptyTag=true)</atom:tag>
            </li>
            <li>
                <atom:tag>inside default tag - DIV</atom:tag>
            </li>
            <li>
                <atom:tag tag="span"> inside SPAN tag</atom:tag>
            </li>
            <li>
                <atom:tag tag="span" class="custom-class-name"> with castom classname</atom:tag>
            </li>
            <li>
                <atom:tag tag="span" any="custom-attribute" id="someid"> with castom attributes</atom:tag>
            </li>
            <li>
                <atom:tag extraAttributes="class=extra,data-attr=extra-data"> with extra (dynamic) attributes, added for nesting tags (see example with ul)</atom:tag>
            </li>
        </ol>


        <p class="description"><b>utils:ul</b> - custom tag, uses nested tags and extraAttributes param</p>
        <utils:ul items="${data['ul-items']}" var="item" varStatus="i" class="ul-class" data-attr="ul-data"
                  liExtraAttributes="class=li-class,data-attr=li-data">
            <a class="a-class" href="${item.href}">${item.text}</a>
        </utils:ul>


        <p class="description">
            <b>atom:atom</b> - abstract atom tag, used for atom
        </p>

        <p class="description">
            <b>atom:page</b> - abstract atom tag, used for pages (this tag manage by all JS and CSS of nested tags)
        </p>

        <p class="description">
            <b>atom:js</b> - js tag
            <br/> where - head/body
            * src  - src attr of js files
            * on - event, to execute the code (document.ready or load or any custom event)
            * code - any code inside <script/> tag
            * async - async attribute of script
            * defer - defer attribute of script
            * mergeInSingleFile - if true, the script placed to the some common.js file and src link to this common.js file

        </p>

        <p class="description">
            <b>atom:css</b> - css tag
        </p>


        ${data}


        js where src on asyn/defer merge
        body
if(inline) asyn/defer = 0 where=head

    </div>

    </body>
    </html>
</atom:page>